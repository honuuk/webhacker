<div class="cont">
            <h3>UNION SQL INJECTION 이란?</h3>
            Union SQL Injection은 2개 이상의 쿼리를 요청하여 결과를 얻는 UNION이라는 SQL 연산자를 이용한 SQL Injection 공격을 말한다. 즉, 원래의 요청에 한 개의 추가 쿼리를 삽입하여 정보를 얻는 공격 기법이다.</br>
            </br>

            먼저 UNION 연산자는 다음과 같은 특성을 가진다.
            </br>
            <p>
             - UNION 연산자를 사용하여 둘 이상의 SELECT문 결과테이블을 하나의 결과테이블로 결합할 수 있다.</br>
             - UNION 연산자를 사용하여 둘 이상의 결과를 결합하려면 각 결과테이블의 구조가 같아야 한다.(컬럼의 갯수가 같아야 하고 호환되는 데이터 형식을 가져야 한다.)</br>
             - UNION 연산 후 합쳐진 결과테이블의 컬럼명은 UNION 연산에 사용된 첫 번째 SELECT문의 결과테이블에 사용된 컬럼명과 동일하다. 다른 SELECT문의 결과테이블에 사용된 컬럼명은 무시된다.</br>
             -기본적으로 UNION 연산자는 결과테이블에서 중복행을 제거한다.</br>
             - ALL 옵션을 사용하면 결과테이블에 모든 행이 포함되고 중복 행이 제거되지 않는다.</br></p>

            다음으로 SELECT 1,2,3 을 수행하면 아래와 같은 결과가 나온다.</br></br>
            <img src="/img/select.JPG"></br></br>
            컬럼명과 데이터가 모두 1, 2, 3으로 채워진다.</br>
            UNION SQL Injection은 UNION 연산자의 컬럼의 갯수가 같아야한다는 조건과 위와 같은 SELECT 연산을 이용해 데이터베이스 정보를 탈취하는 공격기법이다.
            </br></br>

            <h3>UNION SQL INJECTION 공격의 예</h3>
            UNION SQL Injection 공격은 다음과 같은 순서로 진행된다.</br></br>
            1) 공격대상 테이블의 컬럼 갯수 알아내기</br>
            2) 공격대상 테이블의 테이블명 알아내기</br>
            3) 공격대상 테이블의 각 컬럼명 알아내기</br>
            4) 원하는 데이터 출력 </br></br>
            이름을 입력하면 해당 학생의 학번과 학년, 수강과목을 알려주는 웹 애플리케이션이 있다. 이 상황에서 UNION SQL Injection을 이용하여 모든 학생의 학점 정보를 알아내는 과정을 살펴보자. </br>서버로 전송되는 데이터베이스 쿼리는 SELECT * FROM student_info WHERE name='사용자가 입력한 이름 값'이다.</br></br>
            <h4>1) 공격대상 테이블의 컬럼 갯수 알아내기</h4>
            <p>
            컬럼의 갯수가 같아야 연산이 수행되는 UNION 연산의 특징을 이용하여 공격대상 테이블의 컬럼 갯수를 알아낸다. 입력칸에 ' UNION SELECT 1# 을 입력하면 서버로 아래와 같은 쿼리가 전송된다.</br></br>
            SELECT * FROM student_info WHERE name='<span style="color:red;">' UNION SELECT 1#</span><span style="color:gray">'</span>
            </br></br>
             기존의 쿼리문과 UNION 연산을 수행하고 #을 통해 제일 마지막의 홑따옴표 ' 를 주석처리한다. 기존의 쿼리문의 결과는 Empty set이기 때문에 기존 쿼리문의 결과테이블에서 컬럼명만 사용해고 내용은 UNION 뒤에 있는 쿼리의 결과로 채워진다. 만약 공격대상 테이블의 컬럼 갯수가 1개라면 출력화면이 나오고 1개가 아니라면 에러가 발생한다. 에러가 발생한다면 에러가 발생하지 않을 때 까지 숫자를 늘려가며 입력값에 ' UNION SELECT 1,2# / ' UNION SELECT 1,2,3# / ' UNION SELECT 1,2,3,4# 을 차례대로 입력해본다. 만약 에러가 발생하지 않는다면 다음과 같이 출력된다. (입력값에 UNION SELECT 1,2,3,4,5 를 입력한 상황.)
            </p>
            <img src="/img/union_result1.JPG"></br>
            <p>
            우리는 출력화면으로부터 공격대상 테이블의 1번 컬럼명이 s_id, 2번 컬럼명이 name, 3번 컬럼명이 grade, 4번 컬럼명이 class이고 5번 컬럼이 숨겨져 있다는 사실을 확인할 수 있다.
            </p>
            <h4>2) 공격대상 테이블의 테이블명 알아내기</h4>
            <p>
            공격대상 테이블의 컬럼 갯수가 5개라는 정보를 얻어낸 후 입력칸에 ' UNION SELECT 1,table_name,3,4,5 FROM information_schema.tables # 을 입력하게 되면 데이터베이스에 있는 모든 테이블의 이름을 확인할 수 있다. information_schema.tables에는 데이터베이스내의 모든 테이블의 정보가 담겨져 있는데 table_name을 통해 테이블명만 출력한다.
            </p>
            <img src="/img/union_result2.JPG"></br>
            <p>
            출력화면에서 공격대상 테이블명인 student_info 를 찾을 수 있다. SELECT 1,table_name,3,4,5 FROM information_schema.tables 연산을 수행했기 때문에 2번 컬럼 name 자리에 table_name의 정보가 출력되게 된다.
            </p>
            <h4>3) 공격대상 테이블의 각 컬럼명 알아내기</h4>
            <p>
            공격대상 테이블명을 알아냈으니 같은 방법으로 공격대상 테이블의 모든 컬럼명을 알아낸다.</br>
             입력칸에 ' UNION SELECT 1,column_name,3,4,5 FROM information_schema.columns WHERE table_name='student_info' # 을 입력하게 되면 공격대상 테이블인 student_info 테이블의 모든 컬럼명이 출력된다. 데이터베이스내의 모든 컬럼의 정보가 담겨져 있는 information_schema.columns 에서 테이블명이 student_info인 테이블에 속해있는 컬럼의 컬럼명만을 column_name을 통해 출력한다.
            </p>
            <img src="/img/union_result3.JPG"></br>
            <p>
            출력화면을 통해 숨겨져있던 5번째 컬럼명이 score 이고 학점정보가 담겨져 있다는 사실을 알아낼 수 있다.
            </p>
            <h4>4) 원하는 데이터 출력</h4>
            <p>
            공격대상 테이블에 대한 정보를 모두 얻었으니 이제 모든 학생의 학점정보를 출력할 차례이다. 기존의 쿼리문을 Empty set으로 만들고 UNION 연산을 통해 모든 학생의 학점정보를 출력하는 새로운 쿼리문을 작성하면 된다. 입력칸에 ' UNION SELECT s_id,name,score,class,5 FROM student_info #을 입력하면 grade 자리에 score 정보가 출력된다.
            </p>
            <img src="/img/union_result4.JPG"></br>


            </div>
            <div class="cont" style="display:none;">
              <p> 이름과 학번을 입력하면 수강과목의 정보를 얻을 수 있다. union sql injection으로 사용하여 모든 학생의 학번 정보를 얻어내시오.
                  </br>
                  </br>
                  database schema

                  <ul class="schema">
                      <li>s_id(char(10))</li>
                      <li>name(varchar(32))</li>
                      <li>grade(int(1))</li>
                      <li>class(varchar(32))</li>
                      <li>score(char(2))</li>
                  </ul>
                  query</br>
                  SELECT * FROM student_info WHERE name='$name ' AND s_id='$s_id'
              </p>
              </br>
              </br>



              <form action="/page2" method="post" autocomplete=off>
                  <label style="font-size:15px;">name  :</label>
                  <p><input type="text" placeholder="이름을 입력하시오." id="name" /></p>
                  <label style="font-size:15px;">s_id  :</label>
                  <p><input type="text" placeholder="학번을 입력하시오." id="s_id" /></p>
                  <input type="button" value="확인" id="check" onclick="document.getElementById('id01').style.display='block'" /><br />
              </form>
              <div id="id01" class="modal">

                         <div class="modal-content animate" >
                              <div class="imgcontainer">
                                  <span onclick="document.getElementById('id01').style.display='none'" class="close" title="Close Modal">&times;</span>

                              </div>
   <style>.container{color:black;}</style>
                              <div class="container">


                              </div>

   </div>
                          <script>
   $('#check').click( function() {
       $('.container').html('');
            $.ajax({
                url: '/page2',
                dataType: 'json',
                type: 'POST',
                data: {'name':$('#name').val(), 's_id':$('#s_id').val()},
                success: function(result) {
                    if ( result['result'] == true ) {
                       $('.container').html(result['list']);
                    }
                    else{
                         $('.container').html(result['list']);
                    }
                }
            });
        })
      </script>
       <script>
                          // Get the modal
                          var modal = document.getElementById('id01');

                          // When the user clicks anywhere outside of the modal, close it
                          window.onclick = function(event) {
                              if (event.target == modal) {
                                  modal.style.display = "none";
                              }
                          }

                      </script>
                      </div>
            </div>
        <div class="cont" style="display:none;">

            <h3>UNION SQL Injection 방지 기법</h3>
            UNION SQL Injection도 SQL Injection 방지 기법을 통해 방어가 가능하다.
                    <h4> 1) Prepared Statement</h4>
                    <p>
                        Prepared Statement는 말 그대로 서버에 전송될 데이터베이스 쿼리의 형태를 미리 준비해놓는 것이다.</br>
                        서버에 전송될 쿼리문을 다음과 같이 작성하게 되면 데이터베이스 쿼리가 어떤식으로 처리되는지 살펴보자.</br></br>
                        SELECT id FROM member WHERE id = ? AND pw = ?</br></br>
                        Prepared Statement를 사용하면 사용자에게 입력받은 ID값과 PASSWORD값을 해당하는 ? 부분에 삽입하여 쿼리를 전송하게 된다. 이렇게 되면 ?에 입력값이 할당될 때 입력값 전체가 int, string과 같은 알맞는 타입으로 변환 된 후 쿼리에 삽입이 되기 때문에 ', OR, DROP TABLE 등과 같은 문자들이 문법적인 기능을 상실하고 단순한 string으로 처리가 된다.</br>
                        예를 들어, 사용자가 id : tom123, pw : ' or '1'='1 을 입력하였다고 가정하면 입력한 id, pw 값이 string으로 처리 된 후 쿼리문에 삽입되게 된다.</br></br>
                        SELECT id FROM member WHERE id = '<span style="color:red;">tom123</span>' AND pw :'<span style="color:red;">' or '1'='1</span>'</br></br>
                        이 쿼리가 서버로 전송되면 서버는 데이터베이스의 member 테이블에서 ID값이 "<span style="color:red;">tom123</span>"이고 PASSWORD값이 "<span style="color:red;">' or '1'='1</span>"인 계정이 존재하는지 확인하기 때문에 SQL Injection을 통한 인증 우회가 불가능해진다.

                    </p>
                    <h4> 2) 입력값 검증</h4>
                    <p>
                    사용자의 입력에 데이터베이스를 공격할 수 있는</br></br> /*, –, ‘, “, ?, #, (, ), ;, @, =, *, +, UNION, SELECT, DROP, UPDATE, FROM, WHERE, JOIN, SUBSTR, USER_TABLES, USER_TABLE_COLUMNS, INFORMATION_SCHEMA, SYSOBJECT, TABLE_SCHEMA</br></br> 등등의 문자가 섞여 있는지를 확인하고 필터링을 해준다. 입력값 필터링만 제대로 해줘도 대부분의 공격을 막을 수 있다. 하지만 블랙리스트로 선정해놓은 단어들의 리스트 외의 키워드를 사용해 공격을 할 수도 있기 때문에 Prepared Statement를 사용하는 것을 추천한다.
                    </p>
        </div>
