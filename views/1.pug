include top.pug
#grid2
  .content
    .cont
      p
      h3 SQL INJECTION 이란?
      |             SQL Injection(SQL 삽입, SQL 주입으로도 불린다)은 코드 인젝션의 한 기법으로 클라이언트의 입력값을 조작하여 서버의 데이터베이스를 공격할 수 있는 공격방식을 말한다. 즉, 로그인 창이나 검색창과 같은 사용자의 입력을 받아 서버로 보내주는 상황에서 입력값에 데이터베이스 조작 코드를 삽입해 서버의 데이터베이스를 공격하거나 인증을 우회하는 공격방식이다. 공격이 쉬운 데 비해 파괴력이 어마어마하기 때문에 사용자가 입력한 데이터를 제대로
      |             필터링, 이스케이핑하여 처리해야 한다. 이러한 injection 계열의 취약점들은 테스트를 통해 발견하기는 힘들지만 스캐닝툴이나 코드 검증절차를 거치면 보통 쉽게 발견되기 때문에 탐지하기는 쉬운 편이다.
      p
      br
      h3 SQL INJECTION 공격의 예
      |         기본적인 SQL 인젝션 공격을 보자. 예를 들어 고객이 ID를 입력해 자신의 고객 프로필을 불러올 수 있는 웹 애플리케이션이 있다. 이 웹 애플리케이션은 사용자로부터 고객 ID를 입력받아 서버의 데이터베이스로 전달한다. 데이터베이스는 SQL 쿼리를 실행하고 결과를 웹 애플리케이션에 반환한다. 웹 애플리케이션은 최종 사용자에게 결과를 표시한다.
      p
      p
        | 서버로 전송되는 데이터베이스 쿼리를 다음과 같다고 가정해보자.
      p
        | SELECT *
        br
        |             FROM customers
        br
        |             WHERE customer_id = '사용자로부터 입력받은 ID값'
        br
      p
        | 사용자가 다음과 같은 ID값을 입력했을때 서버에서 어떻게 동작되는지 알아보자.
      |         1234567'; DELETE * customers WHERE '1' = '1
      p
        | 위의 입력값이 서버로 전송되면 다음과 같은 쿼리가 실행될 것이다.
      |         SELECT *
      br
      |         FROM customers
      br
      |         WHERE customer_id = '
      span(style="color:red;") 1234567'; DELETE * customers WHERE '1' = '1
      | ';
      br
      p
        | 홑따옴표 ', 세미콜론 ; 문자에 대한 사용자 입력을 무결 처리하지 못하는 경우 위 쿼리가 그대로 실행되어 공격자가 전체 테이블을 삭제하는 것이 가능해진다. 이렇게 되면 백업이 있기를 바라는 수밖에 없다.
      p
        br
        |             다음은 로그인 상황에서의 SQL Injection에 대해 알아보자. 사용자는 ID와 PASSWORD를 입력하고 해당 입력값이 서버의 데이터베이스에 존재하면 로그인에 성공하게 된다. 서버로 전송되는 데이터베이스 쿼리는 다음과 같다
      p
        | SELECT *
        br
        |             FROM customers
        br
        |             WHERE customer_id = '사용자로부터 입력받은 ID값' AND password='사용자로부터 입력받은 PASSWORD값'
        br
      p
        | 사용자가 다음과 같은 ID값과 PASSWORD값을 입력했을때 서버에서 어떻게 동작되는지 알아보자.
      |         ID : alice
      br
      |         PASSWORD : ' or '1'='1
      br
      p
        | 위의 입력값이 서버로 전송되면 다음과 같은 쿼리가 실행될 것이다.
      |         SELECT *
      br
      |         FROM customers
      br
      |         WHERE customer_id = '
      span(style="color:red;") alice
      | ' AND password='
      span(style="color:red;") ' or '1'='1
      | ';
      br
      p
        | 위 쿼리가 실행되면 PASSWORD값이 항상 TRUE가 되어 공격자가 PASSWORD는 모르고 ID만 알고있는 상황에서 서버의 인증을 우회하여 로그인에 성공할 수 있게 된다.
      
      //
        원문보기:
        http://www.itworld.co.kr/news/108468#csidx8eeb24caf3c88f787a27dcd73befaa5
    .cont(style="display:none;")
      p
        | 다음은 로그인 화면이다. 아이디가 tom123인 계정의 비밀번호를 모르는 상황에서 로그인에 성공하시오.
        br
        br
        |             database schema
        ul.schema
          li id(varchar(32))
          li pw(varchar(32))
          li name(varchar(32))
          li phone(char(11))
        |             query
        br
        |             SELECT id FROM member WHERE id = '사용자의 id 입력값' AND pw = '사용자의 pw 입력값'
      br
      form(action="/page1 " method="post" autocomplete="off")
        label(style="font-size:15px;") Id :
        p
          input#id(type="text" placeholder="아이디를 입력하시오.")
        label(style="font-size:15px;") Password :
        p
          input#password(type="password" placeholder="비밀번호를 입력하시오." style="width:60%;")
        input#login(type="button" value="로그인")
        br
      br
      br
      script.
        $('#login').click(function() {
        $.ajax({
        url: '/page1',
        dataType: 'json',
        type: 'POST',
        data: {
        'id': $('#id').val(),
        'password': $('#password').val()
        },
        success: function(result) {
        if (result['result'] == true) {
        alert('로그인 성공!');
        } else {
        alert('로그인 실패!');
        }
        }
        });
        })
    .cont(style="display:none;")
      | 추가적으로 id : ' or '1'='1' #, pw: anything 을 입력하게 되면 SQL에서 # 뒤의 코드가 주석처리 되기 때문에 쿼리가
      br
      br
      |  SELECT id FROM member WHERE id = '' or '1'='1'
      span(style="color:gray;")  #' AND pw :'anything'
      br
      br
      |         꼴이 되어 항상 참인 쿼리로 동작해 ID와 PASSWORD를 모두 모르는 상황에서도 로그인이 가능해진다. 
      br
      br
      h3 SQL Injection 방지 기법
      h4  1) Prepared Statement
      p
        | Prepared Statement는 말 그대로 서버에 전송될 데이터베이스 쿼리의 형태를 미리 준비해놓는 것이다.
        br
        |             서버에 전송될 쿼리문을 다음과 같이 작성하게 되면 데이터베이스 쿼리가 어떤식으로 처리되는지 살펴보자.
        br
        br
        |             SELECT id FROM member WHERE id = ? AND pw = ?
        br
        br
        |             Prepared Statement를 사용하면 사용자에게 입력받은 ID값과 PASSWORD값을 해당하는 ? 부분에 삽입하여 쿼리를 전송하게 된다. 이렇게 되면 ?에 입력값이 할당될 때 입력값 전체가 int, string과 같은 알맞는 타입으로 변환 된 후 쿼리에 삽입이 되기 때문에 ', OR, DROP TABLE 등과 같은 문자들이 문법적인 기능을 상실하고 단순한 string으로 처리가 된다.
        br
        |             예를 들어, 사용자가 id : tom123, pw : ' or '1'='1 을 입력하였다고 가정하면 입력한 id, pw 값이 string으로 처리 된 후 쿼리문에 삽입되게 된다.
        br
        br
        |             SELECT id FROM member WHERE id = '
        span(style="color:red;") tom123
        | ' AND pw :'
        span(style="color:red;") ' or '1'='1
        | '
        br
        br
        |             이 쿼리가 서버로 전송되면 서버는 데이터베이스의 member 테이블에서 ID값이 "
        span(style="color:red;") tom123
        | "이고 PASSWORD값이 "
        span(style="color:red;") ' or '1'='1
        | "인 계정이 존재하는지 확인하기 때문에 SQL Injection을 통한 인증 우회가 불가능해진다.
      h4  2) 입력값 검증
      p
        | 사용자의 입력에 데이터베이스를 공격할 수 있는
        br
        br
        |  /*, –, ‘, “, ?, #, (, ), ;, @, =, *, +, UNION, SELECT, DROP, UPDATE, FROM, WHERE, JOIN, SUBSTR, USER_TABLES, USER_TABLE_COLUMNS, INFORMATION_SCHEMA, SYSOBJECT, TABLE_SCHEMA
        br
        br
        |  등등의 문자가 섞여 있는지를 확인하고 필터링을 해준다. 입력값 필터링만 제대로 해줘도 대부분의 공격을 막을 수 있다. 하지만 블랙리스트로 선정해놓은 단어들의 리스트 외의 키워드를 사용해 공격을 할 수도 있기 때문에 Prepared Statement를 사용하는 것을 추천한다.

include bottom.pug